allprojects {
    group 'com.demo'
    version '1.0.0'
}

buildscript {
    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:2.0.3.RELEASE"
    }
}

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'org.springframework.boot'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
    mavenLocal()
    mavenCentral()
}

jar {
    baseName = 'demo'
    version = '1.0.0'
    manifest {
        attributes "Manifest-Version": 1.0,
                'Main-Class': 'demo.AppStart'
    }
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'

    //druid
    compile 'com.alibaba:druid-spring-boot-starter:1.1.10'

    //spring-boot
    compile 'org.springframework.boot:spring-boot-starter:2.0.3.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-web:2.0.3.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-parent:2.0.3.RELEASE'

    //mybatise
    compile 'org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.2'
    compile 'com.github.miemiedev:mybatis-paginator:1.2.17'

    //mysql-connector
    compile 'mysql:mysql-connector-java:5.1.38'

    compile files('src/main/lib/lingshi_base.jar')
}

configurations {
    mybatisGenerator
}

dependencies {
    mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:1.3.2'
    mybatisGenerator 'mysql:mysql-connector-java:5.1.36'
    mybatisGenerator files('src/main/lib/lingshi_base.jar')
}

task mybatisGenerator {
    doLast {
        def properties = new Properties()
        file("src/main/resources/mybatis/generator/config.properties").withInputStream {
            inputStream -> properties.load(inputStream)
        }
        ant.properties['targetProject'] = projectDir.path
        ant.properties['driverClass'] = properties.getProperty("driverClass")
        ant.properties['connectionURL'] = properties.getProperty("connectionURL")
        ant.properties['userId'] = properties.getProperty("userId")
        ant.properties['password'] = properties.getProperty("password")
        ant.properties['srcMainJava'] = projectDir.path + '/src/main/java'
        ant.properties['srcMainResource'] = projectDir.path + '/src/main/resources'
        ant.properties['modelPackage'] = properties.getProperty("modelPackage")
        ant.properties['clientPackage'] = properties.getProperty("clientPackage")
        ant.properties['mapperPackage'] = properties.getProperty("mapperPackage")
        ant.taskdef(
                name: 'mbgenerator',
                classname: 'org.mybatis.generator.ant.GeneratorAntTask',
                classpath: configurations.mybatisGenerator.asPath
        )
        ant.mbgenerator(overwrite: true, configfile: projectDir.path + '/src/main/resources/mybatis/generator/generatorConfig.xml', verbose: true) {
            propertyset {
                propertyref(name: 'targetProject')
                propertyref(name: 'driverClass')
                propertyref(name: 'connectionURL')
                propertyref(name: 'userId')
                propertyref(name: 'password')
                propertyref(name: 'srcMainJava')
                propertyref(name: 'srcMainResource')
                propertyref(name: 'modelPackage')
                propertyref(name: 'clientPackage')
                propertyref(name: 'mapperPackage')
            }
        }
    }
}
